{"ts":1366584278824,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    user ||= User.new # guest user (not logged in)\n    if user.has_role? :admin\n      can :manage, :all\n    end\n    # Define abilities for the passed in user here. For example:\n    #\n    #   user ||= User.new # guest user (not logged in)\n    #   if user.admin?\n    #     can :manage, :all\n    #   else\n    #     can :read, :all\n    #   end\n    #\n    # The first argument to `can` is the action you are giving the user permission to do.\n    # If you pass :manage it will apply to every action. Other common actions here are\n    # :read, :create, :update and :destroy.\n    #\n    # The second argument is the resource the user can perform the action on. If you pass\n    # :all it will apply to every resource. Otherwise pass a Ruby class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details: https://github.com/ryanb/cancan/wiki/Defining-Abilities\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1140}]],"length":1140}
{"contributors":[],"silentsave":false,"ts":1366584293618,"patch":[[{"diffs":[[0,"   e"],[-1,"nd\n    # Define abilities for the passed in user here. For example:\n    #\n    #   user ||= User.new # guest user (not logged in)\n    #   if user.admin?\n    #     can :manage, :all\n    #   else\n    #     can :read, :all\n    #   end\n    #\n    # The first argument to `can` is the action you are giving the user permission to do.\n    # If you pass :manage it will apply to every action. Other common actions here are\n    # :read, :create, :update and :destroy.\n    #\n    # The second argument is the resource the user can perform the action on. If you pass\n    # :all it will apply to every resource. Otherwise pass a Ruby class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details: https://github.com/ryanb/cancan/wiki/Defining-Abilities"],[1,"lse\n      can :view, :silver if user.has_role? :silver\n      can :view, :gold if user.has_role? :gold\n      can :view, :platinum if user.has_role? :platinum\n    end"],[0,"\n  end\n"],[1,""],[0,"end"],[-1,"\n"]],"start1":169,"start2":169,"length1":971,"length2":178}]],"length":347,"saved":false}
