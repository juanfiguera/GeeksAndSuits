{"ts":1366580172785,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# Commonly used email steps\n#\n# To add your own steps make a custom_email_steps.rb\n# The provided methods are:\n#\n# last_email_address\n# reset_mailer\n# open_last_email\n# visit_in_email\n# unread_emails_for\n# mailbox_for\n# current_email\n# open_email\n# read_emails_for\n# find_email\n#\n# General form for email scenarios are:\n#   - clear the email queue (done automatically by email_spec)\n#   - execute steps that sends an email\n#   - check the user received an/no/[0-9] emails\n#   - open the email\n#   - inspect the email contents\n#   - interact with the email (e.g. click links)\n#\n# The Cucumber steps below are setup in this order.\n\nmodule EmailHelpers\n  def current_email_address\n    # Replace with your a way to find your current email. e.g @current_user.email\n    # last_email_address will return the last email address used by email spec to find an email.\n    # Note that last_email_address will be reset after each Scenario.\n    last_email_address || \"example@example.com\"\n  end\nend\n\nWorld(EmailHelpers)\n\n#\n# Reset the e-mail queue within a scenario.\n# This is done automatically before each scenario.\n#\n\nGiven /^(?:a clear email queue|no emails have been sent)$/ do\n  reset_mailer\nend\n\n#\n# Check how many emails have been sent/received\n#\n\nThen /^(?:I|they|\"([^\"]*?)\") should receive (an|no|\\d+) emails?$/ do |address, amount|\n  unread_emails_for(address).size.should == parse_email_count(amount)\nend\n\nThen /^(?:I|they|\"([^\"]*?)\") should have (an|no|\\d+) emails?$/ do |address, amount|\n  mailbox_for(address).size.should == parse_email_count(amount)\nend\n\nThen /^(?:I|they|\"([^\"]*?)\") should receive (an|no|\\d+) emails? with subject \"([^\"]*?)\"$/ do |address, amount, subject|\n  unread_emails_for(address).select { |m| m.subject =~ Regexp.new(Regexp.escape(subject)) }.size.should == parse_email_count(amount)\nend\n\nThen /^(?:I|they|\"([^\"]*?)\") should receive (an|no|\\d+) emails? with subject \\/([^\"]*?)\\/$/ do |address, amount, subject|\n  unread_emails_for(address).select { |m| m.subject =~ Regexp.new(subject) }.size.should == parse_email_count(amount)\nend\n\nThen /^(?:I|they|\"([^\"]*?)\") should receive an email with the following body:$/ do |address, expected_body|\n  open_email(address, :with_text => expected_body)\nend\n\n#\n# Accessing emails\n#\n\n# Opens the most recently received email\nWhen /^(?:I|they|\"([^\"]*?)\") opens? the email$/ do |address|\n  open_email(address)\nend\n\nWhen /^(?:I|they|\"([^\"]*?)\") opens? the email with subject \"([^\"]*?)\"$/ do |address, subject|\n  open_email(address, :with_subject => subject)\nend\n\nWhen /^(?:I|they|\"([^\"]*?)\") opens? the email with subject \\/([^\"]*?)\\/$/ do |address, subject|\n  open_email(address, :with_subject => Regexp.new(subject))\nend\n\nWhen /^(?:I|they|\"([^\"]*?)\") opens? the email with text \"([^\"]*?)\"$/ do |address, text|\n  open_email(address, :with_text => text)\nend\n\nWhen /^(?:I|they|\"([^\"]*?)\") opens? the email with text \\/([^\"]*?)\\/$/ do |address, text|\n  open_email(address, :with_text => Regexp.new(text))\nend\n\n#\n# Inspect the Email Contents\n#\n\nThen /^(?:I|they) should see \"([^\"]*?)\" in the email subject$/ do |text|\n  current_email.should have_subject(text)\nend\n\nThen /^(?:I|they) should see \\/([^\"]*?)\\/ in the email subject$/ do |text|\n  current_email.should have_subject(Regexp.new(text))\nend\n\nThen /^(?:I|they) should see \"([^\"]*?)\" in the email body$/ do |text|\n  current_email.default_part_body.to_s.should include(text)\nend\n\nThen /^(?:I|they) should see \\/([^\"]*?)\\/ in the email body$/ do |text|\n  current_email.default_part_body.to_s.should =~ Regexp.new(text)\nend\n\nThen /^(?:I|they) should see the email delivered from \"([^\"]*?)\"$/ do |text|\n  current_email.should be_delivered_from(text)\nend\n\nThen /^(?:I|they) should see \"([^\\\"]*)\" in the email \"([^\"]*?)\" header$/ do |text, name|\n  current_email.should have_header(name, text)\nend\n\nThen /^(?:I|they) should see \\/([^\\\"]*)\\/ in the email \"([^\"]*?)\" header$/ do |text, name|\n  current_email.should have_header(name, Regexp.new(text))\nend\n\nThen /^I should see it is a multi\\-part email$/ do\n    current_email.should be_multipart\nend\n\nThen /^(?:I|they) should see \"([^\"]*?)\" in the email html part body$/ do |text|\n    current_email.html_part.body.to_s.should include(text)\nend\n\nThen /^(?:I|they) should see \"([^\"]*?)\" in the email text part body$/ do |text|\n    current_email.text_part.body.to_s.should include(text)\nend\n\n#\n# Inspect the Email Attachments\n#\n\nThen /^(?:I|they) should see (an|no|\\d+) attachments? with the email$/ do |amount|\n  current_email_attachments.size.should == parse_email_count(amount)\nend\n\nThen /^there should be (an|no|\\d+) attachments? named \"([^\"]*?)\"$/ do |amount, filename|\n  current_email_attachments.select { |a| a.filename == filename }.size.should == parse_email_count(amount)\nend\n\nThen /^attachment (\\d+) should be named \"([^\"]*?)\"$/ do |index, filename|\n  current_email_attachments[(index.to_i - 1)].filename.should == filename\nend\n\nThen /^there should be (an|no|\\d+) attachments? of type \"([^\"]*?)\"$/ do |amount, content_type|\n  current_email_attachments.select { |a| a.content_type.include?(content_type) }.size.should == parse_email_count(amount)\nend\n\nThen /^attachment (\\d+) should be of type \"([^\"]*?)\"$/ do |index, content_type|\n  current_email_attachments[(index.to_i - 1)].content_type.should include(content_type)\nend\n\nThen /^all attachments should not be blank$/ do\n  current_email_attachments.each do |attachment|\n    attachment.read.size.should_not == 0\n  end\nend\n\nThen /^show me a list of email attachments$/ do\n  EmailSpec::EmailViewer::save_and_open_email_attachments_list(current_email)\nend\n\n#\n# Interact with Email Contents\n#\n\nWhen /^(?:I|they) follow \"([^\"]*?)\" in the email$/ do |link|\n  visit_in_email(link)\nend\n\nWhen /^(?:I|they) click the first link in the email$/ do\n  click_first_link_in_email\nend\n\n#\n# Debugging\n# These only work with Rails and OSx ATM since EmailViewer uses RAILS_ROOT and OSx's 'open' command.\n# Patches accepted. ;)\n#\n\nThen /^save and open current email$/ do\n  EmailSpec::EmailViewer::save_and_open_email(current_email)\nend\n\nThen /^save and open all text emails$/ do\n  EmailSpec::EmailViewer::save_and_open_all_text_emails\nend\n\nThen /^save and open all html emails$/ do\n  EmailSpec::EmailViewer::save_and_open_all_html_emails\nend\n\nThen /^save and open all raw emails$/ do\n  EmailSpec::EmailViewer::save_and_open_all_raw_emails\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":6333}]],"length":6333}
